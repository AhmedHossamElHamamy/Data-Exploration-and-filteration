# -*- coding: utf-8 -*-
"""
Created on Wed Feb 24 04:24:38 2021

@author: ahmed
"""
import time
import pandas as pd

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york': 'new_york_city.csv',
              'washington': 'washington.csv' }


 # TO DO: get user input for city (chicago, new york city, washington)
 # to repeat this part until the user Enter the correct city
def choice_city():
     while True:
      city=input('Would you like to see data for chicago , new york, or washington ?\n')
      if city.lower() not in ['chicago','new york','washington']:
       print("Please: Enter a correct city")
      else:
          break
     return city

 # TO DO: get user input for month (january ,february, march, april, may or june)
 # to repeat this part until the user Enter the correct month
def choice_month():
      while True:
        month=input('Which month? january ,february, march, april, may or june?\n')
        if month.lower() not in ['january' ,'february', 'march', 'april', 'may' , 'june']:
             print("Please :Enter a correct month")
        else:
         break
      return month

 # TO DO: get user input for day (Saturday,Sunday,Monday,Tuesday,Wendsday,Thursday,Friday)
 # to repeat this part until the user Enter the correct day
def choice_day():
     while True:
       day=input('\nwhich day? Please type a day saturday,sunday,monday,tuesday,wednesday,thursday,friday\n')
       if day.lower() not in ['saturday','sunday','monday','tuesday','wednesday','thursday','friday']:
          print("Please :Enter a correct day")
       else:
         break
     return day



def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.
    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    
    print('Hello! Let\'s explore some US bikeshare data!')
    city=choice_city()
    flag=1
    while flag==1:
     choice=input('\nWould you want to filter the data by month , day , both or not at all ? Type "none" for no time filter \n')
     if choice.lower() =='month':
      month=choice_month()
      day='all'
      flag=-1
     elif choice.lower()=='day':
        day=choice_day()
        month='all'
        flag=-1
     elif choice.lower()=='both':
       month=choice_month()
       day=choice_day()
       flag=-1
     elif choice.lower()=='none': 
        day='all'
        month='all'
        flag=-1
     else :
       print("Enter the correct choice")  
       
    print('-'*40)
    return city.lower(), month.lower(), day.lower()


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """

    # load data file into a dataframe
    df = pd.read_csv(CITY_DATA[city])
    # convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    # extract month and day of week from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.day_name()
    # filter by month if applicable
    if month != 'all':
        # use the index of the months list to get the corresponding int
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1
        # filter by month to create the new dataframe
        df = df[df['month'] == month]
    # filter by day of week if applicable
    if day != 'all':
        # filter by day of week to create the new dataframe
        df = df[df['day_of_week'] == day.title()]
    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()
    # TO DO: display the most common month
    the_most_common_month=df.month.mode()[0]
    print('the most common month :',the_most_common_month)
    # TO DO: display the most common day of week
    the_most_common_day_of_week=df['day_of_week'].mode()[0]
    print('the most common day of week:',the_most_common_day_of_week)
    # TO DO: display the most common start hour
    # extract hour from the Start Time column to create an hour column
    df['hour'] = df['Start Time'].dt.hour
   # find the most popular hour
    popular_hour = df['hour'].mode()[0]
    print('Most Popular Start Hour:', popular_hour)
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
     """Displays statistics on the most popular stations and trip."""
     
     print('\nCalculating The Most Popular Stations and Trip...\n')
     start_time = time.time()
    # TO DO: display most commonly used start station.
     most_commonly_used_start_station=df['Start Station'].mode()[0]
     print(' most commonly used start station:',most_commonly_used_start_station)
    # TO DO: display most commonly used end station
     most_commonly_used_end_station=df['End Station'].mode()[0]
     print('most commonly used end station:',most_commonly_used_end_station)
    # TO DO: display most frequent combination of start station and end station trip
     print("\nThis took %s seconds." % (time.time() - start_time))
     print('-'*40)
     

def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""
    
    print('\nCalculating Trip Duration...\n')
    start_time = time.time()
    # TO DO: display mean travel time
    mean_time_duration=df['Trip Duration'].mean()
    print('mean time duration :',mean_time_duration)
    total_trip_duration=df['Trip Duration'].sum()
    print('total trip duration:',total_trip_duration)
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""
    print('\nCalculating User Stats...\n')
    start_time = time.time()
    # TO DO: Display counts of user types
    user_type=df['User Type'].value_counts()
    print('Count of User Type :',user_type)
    most_popular_user_type=df['User Type'].mode()[0]
    print('most popular user type:', most_popular_user_type)
    # TO DO: Display counts of gender
    if city !='washington':
        gender=df['Gender'].value_counts()
        print('Count of Gender :',gender)
    
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

#To repeat using functions

while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)
        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)
        counter1=0
        counter2=5
        while True:
            x=input('\nWould you want to see rows of data from {} to {} ?Enter yes or no \n'.format(counter1, counter2))
            if x.lower() == 'yes':
             print(df.iloc[counter1:counter2])
             counter1+=5
             counter2+=5
            else:
             break
        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break
